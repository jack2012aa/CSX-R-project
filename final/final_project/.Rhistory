year.GPI[37:48,1] <- score.GPI[,5]
year.GPI[1:12,2] <- score.GPI[,8]
year.GPI[13:24,2] <- score.GPI[,9]
year.GPI[25:36,2] <- score.GPI[,10]
year.GPI[37:48,2] <- score.GPI[,11]
View(year.GPI)
score.GPI <- merge(score, data[data$topic == "School enrollment, tertiary (gross), gender parity index (GPI)",], by = "country")
View(score.GPI)
runApp()
year.GPI[1:48,1] <- score.GPI[,2:5]
rank <- read.csv("./Data/College ranking.csv", stringsAsFactors = F, na.strings = c("NA", ""))
GDP <- read.csv("./Data/Country GDP.csv", stringsAsFactors = F, na.strings = c("NA",""))
data <- read.csv("./Data/edu_var.csv", stringsAsFactors = F, na.strings = c("NA",""))
expend <- read.csv("./Data/Government expenditure.csv", stringsAsFactors = F, na.strings = c("NA",""))
rank_2012 <- rank[rank$year == "2012",]
rank_2013 <- rank[rank$year == "2013",]
rank_2014 <- rank[rank$year == "2014",]
rank_2014 <- rank_2014[1:100,]
rank_2015 <- rank[rank$year == "2015",]
rank_2015 <- rank_2015[1:100,]
rank_total1 <- merge(rank_2012, rank_2013, by = "institution")
rank_total2 <- merge(rank_2014, rank_2015, by = "institution")
rank_total <- merge(rank_total1, rank_total2, by = "institution")
countrymean <- function(x,y,z){
eval.parent(substitute(z[z$country == y, paste("x",x[1,"year"], sep = "")] <- mean(x[x$country == y,2])))
}
country <- c("Australia", "Canada", "Denmark", "France", "Germany", 'Israel','Japan','Netherlands','South Korea','Sweden','Switzerland','United Kingdom','USA')
x2012 <- c(1:13)
x2013 <- c(1:13)
x2014 <- c(1:13)
x2015 <- c(1:13)
score <- data.frame(country, x2012, x2013,x2014,x2015)
score_2012 <- as.data.frame(rank_2012[,c(3,13,14)])
score_2013 <- as.data.frame(rank_2013[,c(3,13,14)])
score_2014 <- as.data.frame(rank_2014[,c(3,13,14)])
score_2015 <- as.data.frame(rank_2015[,c(3,13,14)])
countrymean(score_2012, "USA", score)
countrymean(score_2013, "USA", score)
countrymean(score_2014, "USA", score)
countrymean(score_2015, "USA", score)
countrymean(score_2012, "Australia", score)
countrymean(score_2013, "Australia", score)
countrymean(score_2014, "Australia", score)
countrymean(score_2015, "Australia", score)
countrymean(score_2012, "Canada", score)
countrymean(score_2013, "Canada", score)
countrymean(score_2014, "Canada", score)
countrymean(score_2015, "Canada", score)
countrymean(score_2012, "Denmark", score)
countrymean(score_2013, "Denmark", score)
countrymean(score_2014, "Denmark", score)
countrymean(score_2015, "Denmark", score)
countrymean(score_2012, "France", score)
countrymean(score_2013, "France", score)
countrymean(score_2014, "France", score)
countrymean(score_2015, "France", score)
countrymean(score_2012, "Germany", score)
countrymean(score_2013, "Germany", score)
countrymean(score_2014, "Germany", score)
countrymean(score_2015, "Germany", score)
countrymean(score_2012, "Israel", score)
countrymean(score_2013, "Israel", score)
countrymean(score_2014, "Israel", score)
countrymean(score_2015, "Israel", score)
countrymean(score_2012, "Japan", score)
countrymean(score_2013, "Japan", score)
countrymean(score_2014, "Japan", score)
countrymean(score_2015, "Japan", score)
countrymean(score_2012, "Netherlands", score)
countrymean(score_2013, "Netherlands", score)
countrymean(score_2014, "Netherlands", score)
countrymean(score_2015, "Netherlands", score)
countrymean(score_2012, "South Korea", score)
countrymean(score_2013, "South Korea", score)
countrymean(score_2014, "South Korea", score)
countrymean(score_2015, "South Korea", score)
countrymean(score_2012, "Sweden", score)
countrymean(score_2013, "Sweden", score)
countrymean(score_2014, "Sweden", score)
countrymean(score_2015, "Sweden", score)
countrymean(score_2012, "Switzerland", score)
countrymean(score_2013, "Switzerland", score)
countrymean(score_2014, "Switzerland", score)
countrymean(score_2015, "Switzerland", score)
countrymean(score_2012, "United Kingdom", score)
countrymean(score_2013, "United Kingdom", score)
countrymean(score_2014, "United Kingdom", score)
countrymean(score_2015, "United Kingdom", score)
score$avesc <- apply(score[2:5], 1, mean)
(
score.GPI <- merge(score, data[data$topic == "School enrollment, tertiary (gross), gender parity index (GPI)",], by = "country")
#各年
year.GPI <- data.frame(c(1:48),c(1:48))
#各年
year.GPI <- data.frame(c(1:48),c(1:48))
View(year.GPI)
View(year.GPI)
year.GPI[1:48,1] <- score.GPI[,2:5]
score.GPI <- merge(score, data[data$topic == "School enrollment, tertiary (gross), gender parity index (GPI)",], by = "country")
year.GPI[1:48,1] <- score.GPI[,2:5]
View(score.GPI)
score.GPI[,2:5]
x <- 2:5
x[5]
runApp()
runApp()
score.GPI[,x[1]]
score.GPI[,x[1]+6]
runApp()
data.frame(c(1:12*4),c(1:12*4))
data.frame(c(1:12*(4-2)),c(1:12*(4-2)))
runApp()
Value <- c(2012,2015) - c(2004, 2004)
yearnum <- Value[1]:Value[2]
runApp()
year <- data.frame(c(1:12*(Value[2]-Value[1])),c(1:12*(Value[2]-Value[1])))
View(year)
runApp()
year <- data.frame(c(1:12*4),c(1:12*4)
year <- data.frame(c(1:12*4),c(1:12*4)
year <- data.frame(c(1:12*4),c(1:12*4))
View(year)
runApp()
year <- data.frame(c(1:48),c(1:48))
View(year)
View(score_2015)
View(score.GPI)
year[1:12,1] <- score[,x[1]]
View(year)
View(score)
year[1:12,1] <- score.GPI[,x[1]]
View(year)
x <-  merge(score, data[data$topic == input$dataselect,], by = "country")
runApp()
runApp()
length(x)
score.GPI[,x]
runApp()
for
()
for(n in x){}
for(n in x){}
for(n in x){
rown1 <- 12*n -11
rown2 <- 12*n
year
}
count = count + 1
count <- 0
for (n in X){}
for (n in x){
count <- count + 1
n
}
for (n in x){
count <- count + 1
n
}
for (n in x){
count <- count + 1
print(count)
n
}
runApp()
for (n in x){
count <- count + 1
print(count)
print(n)
}
server <- function(input, output) {
output$distPlot <- renderPlot({
if (input$checkbox){
year <-  merge(score, data[data$topic == input$dataselect,], by = "country")
Value <- input$range - c(2004,2004)
year$score <- apply(year[2:5], 1, mean)
year$score_ <- apply(year[Value[1]:Value[2]], 1, mean)
} else {
x <-  merge(score, data[data$topic == input$dataselect,], by = "country")
Value <- input$range - c(2010,2010)
subs <- 12*length(Value)
yearnum <- Value[1]:Value[2]
year <- data.frame(c(1:subs), c(1:subs))
count <- 1
for(n in yearnum){
count <- count + 1
rown1 <- 12*count - 11
rown2 <- 12*count
year[rown1 : rown2,1] <- x[,yearnum[n]]
year[rown1 : rown2,2] <- x[,yearnum[n] + 5]
colnames(year) <- c("score","score_")
}
}
ggplot(year, aes(score_,score)) + geom_point() +geom_smooth(method = "lm") + labs(x = input$dataselect, y = "score")
})}
yearnum <- Value[1]:Value[2]
Value <- input$range - c(2010,2010)
yearnum <- Value[1]:Value[2]
Value <- input$range - c(2004,2004)
server <- function(input, output) {
output$distPlot <- renderPlot({
if (input$checkbox){
year <-  merge(score, data[data$topic == input$dataselect,], by = "country")
Value <- input$range - c(2004,2004)
year$score <- apply(year[2:5], 1, mean)
year$score_ <- apply(year[Value[1]:Value[2]], 1, mean)
} else {
x <-  merge(score, data[data$topic == input$dataselect,], by = "country")
Value <- input$range - c(2010,2010)
subs <- 12*length(Value)
yearnum <- Value[1]:Value[2]
year <- data.frame(c(1:subs), c(1:subs))
count <- 1
for(n in yearnum){
count <- count + 1
rown1 <- 12*count - 11
rown2 <- 12*count
year[rown1 : rown2,1] <- x[,yearnum[n]]
year[rown1 : rown2,2] <- x[,yearnum[n] + 5]
colnames(year) <- c("score","score_")
}
}
ggplot(year, aes(score_,score)) + geom_point() +geom_smooth(method = "lm") + labs(x = input$dataselect, y = "score")
})}
Value <- input$range - c(2004,2004)
Value <- input$range - c(2010,2010)
runApp()
runApp()
runApp()
runApp()
runApp()
rank_2015$country
data$topic
for (n in c(2012:2015)){
paste("score", n, sep = "_") <- as.data.frame(paste("rank", n, sep = "_")[,c3,13,14])
}
paste("score", n, sep = "_") <- as.data.frame(paste("rank", n, sep = "_")[c(3,13,14)])
x <- 1
paste("score", x, sep = "_")
paste("score", x, sep = "_") <- 2
n <- paste("score", x, sep = "_")
n
n <- x
n
score_2012
score_1
ggplot(rank_total, aes(x = score.x.x)) + geom_histogram() + facet_grid(~country.x.x) + theme_bw() + stat_bin(bins = 100)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(rank_total)
ggplot(rank_total, aes(x = paste("score", ".x.x", sep = "")) + geom_histogram() + facet_grid(~country.x.x) + theme_bw() + stat_bin(bins = 100)
)
ggplot(rank_total, aes(x = paste("score", ".x.x", sep = ""))) + geom_histogram() + facet_grid(~country.x.x) + theme_bw() + stat_bin(bins = 100)
paste("score", ".x.x", sep = ""
)
View(rank_2012)
rankplot <- paste("rank", input$datayear, sep = "_")
rankplot <- paste("rank", "2012", sep = "_")
rankplot
x <- 2012
rank_x
View(rank)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(rank)
View(score)
View(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Jack Huang/AppData/Local/Temp/Temp1_appfinal-20180808T021055Z-001.zip/appfinal')
runApp('C:/Users/Jack Huang/AppData/Local/Temp/Temp1_appfinal-20180808T021055Z-001.zip/appfinal')
runApp()
install.packages("png")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rank <- read.csv("./Data/College ranking.csv", stringsAsFactors = F, na.strings = c("NA", ""))
GDP <- read.csv("./Data/Country GDP.csv", stringsAsFactors = F, na.strings = c("NA",""))
data <- read.csv("./Data/edu_var.csv", stringsAsFactors = F, na.strings = c("NA",""))
expend <- read.csv("./Data/Government expenditure.csv", stringsAsFactors = F, na.strings = c("NA",""))
rank_2012 <- rank[rank$year == "2012",]
rank_2013 <- rank[rank$year == "2013",]
rank_2014 <- rank[rank$year == "2014",]
rank_2014 <- rank_2014[1:100,]
rank_2015 <- rank[rank$year == "2015",]
rank_2015 <- rank_2015[1:100,]
rank_total1 <- merge(rank_2012, rank_2013, by = "institution")
rank_total2 <- merge(rank_2014, rank_2015, by = "institution")
rank_total <- merge(rank_total1, rank_total2, by = "institution")
ggplot(rank_total, aes(x = score.x.x)) + geom_histogram() + facet_grid(~country.x.x) + theme_bw() + stat_bin(bins = 100)
#計算各國各年分數
countrymean <- function(x,y,z){
eval.parent(substitute(z[z$country == y, paste("x",x[1,"year"], sep = "")] <- mean(x[x$country == y,2])))
}
country <- c("Australia", "Canada", "Denmark", "France", "Germany", 'Israel','Japan','Netherlands','South Korea','Sweden','Switzerland','United Kingdom','USA')
x2012 <- c(1:13)
x2013 <- c(1:13)
x2014 <- c(1:13)
x2015 <- c(1:13)
score <- data.frame(country, x2012, x2013,x2014,x2015)
for (n in c(2012:2015)){
paste("score", n, sep = "_") <- as.data.frame(paste("rank", n, sep = "_")[c(3,13,14)])
}
countrymean(score_2012, "USA", score)
countrymean(score_2013, "USA", score)
countrymean(score_2014, "USA", score)
countrymean(score_2015, "USA", score)
countrymean(score_2012, "Australia", score)
countrymean(score_2013, "Australia", score)
countrymean(score_2014, "Australia", score)
countrymean(score_2015, "Australia", score)
countrymean(score_2012, "Canada", score)
countrymean(score_2013, "Canada", score)
countrymean(score_2014, "Canada", score)
countrymean(score_2015, "Canada", score)
countrymean(score_2012, "Denmark", score)
countrymean(score_2013, "Denmark", score)
countrymean(score_2014, "Denmark", score)
countrymean(score_2015, "Denmark", score)
countrymean(score_2012, "France", score)
countrymean(score_2013, "France", score)
countrymean(score_2014, "France", score)
countrymean(score_2015, "France", score)
countrymean(score_2012, "Germany", score)
countrymean(score_2013, "Germany", score)
countrymean(score_2014, "Germany", score)
countrymean(score_2015, "Germany", score)
countrymean(score_2012, "Israel", score)
countrymean(score_2013, "Israel", score)
countrymean(score_2014, "Israel", score)
countrymean(score_2015, "Israel", score)
countrymean(score_2012, "Japan", score)
countrymean(score_2013, "Japan", score)
countrymean(score_2014, "Japan", score)
countrymean(score_2015, "Japan", score)
countrymean(score_2012, "Netherlands", score)
countrymean(score_2013, "Netherlands", score)
countrymean(score_2014, "Netherlands", score)
countrymean(score_2015, "Netherlands", score)
countrymean(score_2012, "South Korea", score)
countrymean(score_2013, "South Korea", score)
countrymean(score_2014, "South Korea", score)
countrymean(score_2015, "South Korea", score)
countrymean(score_2012, "Sweden", score)
countrymean(score_2013, "Sweden", score)
countrymean(score_2014, "Sweden", score)
countrymean(score_2015, "Sweden", score)
countrymean(score_2012, "Switzerland", score)
countrymean(score_2013, "Switzerland", score)
countrymean(score_2014, "Switzerland", score)
countrymean(score_2015, "Switzerland", score)
countrymean(score_2012, "United Kingdom", score)
countrymean(score_2013, "United Kingdom", score)
countrymean(score_2014, "United Kingdom", score)
countrymean(score_2015, "United Kingdom", score)
score$avesc <- apply(score[2:5], 1, mean)
score.GPI <- merge(score, data[data$topic == "School enrollment, tertiary (gross), gender parity index (GPI)",], by = "country")
#國與國
score.GPI$avescG <- apply(score.GPI[8:11], 1, mean)
model.GPI <- lm(avesc~avescG, data = score.GPI)
summary(model.GPI)
ggplot(score.GPI, aes(avesc, avescG)) + geom_point() + geom_smooth(method ="lm")
#各年
year.GPI <- data.frame(c(1:48),c(1:48))
year.GPI[1:48,1] <- score.GPI[,2:5]
year.GPI[1:12,2] <- score.GPI[,8]
year.GPI[13:24,2] <- score.GPI[,9]
year.GPI[25:36,2] <- score.GPI[,10]
year.GPI[37:48,2] <- score.GPI[,11]
colnames(year.GPI) <- c("score","GPI")
summary(lm(GPI~score,data = year.GPI), data = year.GPI)
View(score.GPI)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(score)
runApp()
runApp()
runApp()
runApp()
runApp()
score[1,]
score[,1]
score[,"country"]
score["country"]
runApp()
runApp()
runApp()
runApp()
View(score.GPI)
runApp()
runApp()
as.character(c(1:subs)
)
as.character(c(1:13))
runApp()
?data.freme
?data.frame
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
